module FastlaneCore
  # Represents an Xcode project
  class Xcodebuild
    # The config object containing the scheme, configuration, etc.
    attr_accessor :options

    # Should the output of xcodebuild commands be silenced?
    attr_accessor :silent

    # Should we redirect stderr to /dev/null for xcodebuild commands?
    # Gets rid of annoying plugin info warnings.
    attr_accessor :suppress_stderr

    def initialize(options, silent: false, suppress_stderr: false)
      self.options = options
      self.silent = silent
      self.suppress_stderr = suppress_stderr
    end

    def parameters
      proj = []
      proj << "-workspace #{options[:workspace].shellescape}" if options[:workspace]
      proj << "-scheme #{options[:scheme].shellescape}" if options[:scheme]
      proj << "-project #{options[:project].shellescape}" if options[:project]
      proj << "-configuration #{options[:configuration].shellescape}" if options[:configuration]

      return proj
    end

    def showbuildsettings
      return @parsed_info if @parsed_info

      begin
        timeout = FastlaneCore::Xcodebuild.settings_timeout
        retries = FastlaneCore::Xcodebuild.settings_retries
        result = FastlaneCore::Xcodebuild.run_command(showbuildsettings_command, timeout: timeout, retries: retries, print: !self.silent)
        @parsed_info = FastlaneCore::XcodebuildShowbuildsettingsOutputParser.new(result)
      rescue Timeout::Error
        raise FastlaneCore::Interface::FastlaneDependencyCausedException.new, "xcodebuild -showBuildSettings timed-out after #{timeout} seconds and #{retries} retries." \
        " You can override the timeout value with the environment variable FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT," \
          " and the number of retries with the environment variable FASTLANE_XCODEBUILD_SETTINGS_RETRIES ".red
      end
      @parsed_info
    end

    def showbuildsettings_command
      project = if options[:workspace]
                  options[:workspace].gsub(/\.xcworkspace/, '.xcodeproj')
                else
                  options[:project]
                end

      command = []
      command << "xcodebuild -showBuildSettings -alltargets -project #{project}"
      command << "-configuration #{options[:configuration].shellescape}" if options[:configuration]
      command << "-xcconfig #{options[:xcconfig].shellescape}" if options[:xcconfig]
      command << options[:xcargs] if options[:xcargs]
      command << "clean" unless FastlaneCore::Helper.xcode_at_least?('8.3')
      command << "2> /dev/null" if suppress_stderr
      command.join(' ')
    end

    def list
      return @list_info if @list_info

      # xcode >= 6 might hang here if the user schemes are missing
      begin
        timeout = FastlaneCore::Xcodebuild.settings_timeout
        retries = FastlaneCore::Xcodebuild.settings_retries
        command = list_command
        result = FastlaneCore::Xcodebuild.run_command(list_command, timeout: timeout, retries: retries, print: !self.silent)
        @list_info = FastlaneCore::XcodebuildListOutputParser.new(result)
      rescue Timeout::Error
        UI.user_error!("xcodebuild -list timed-out after #{timeout * retries} seconds. You might need to recreate the user schemes." \
          " You can override the timeout value with the environment variable FASTLANE_XCODE_LIST_TIMEOUT")
      end

      UI.user_error!("Error parsing xcode file using `#{command}`") unless @list_info

      @list_info
    end

    def list_command
      # Unfortunately since we pass the workspace we also get all the
      # schemes generated by CocoaPods
      options = parameters.delete_if { |a| a.to_s.include? "scheme" }
      command = "xcodebuild -list #{options.join(' ')}"
      command += " 2> /dev/null" if suppress_stderr
      command
    end

    # @internal to module
    def self.list_timeout
      (ENV['FASTLANE_XCODE_LIST_TIMEOUT'] || 10).to_i
    end

    # @internal to module
    def self.list_retries
      (ENV['FASTLANE_XCODE_LIST_RETRIES'] || 3).to_i
    end

    # @internal to module
    def self.settings_timeout
      (ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] || 10).to_i
    end

    # @internal to module
    def self.settings_retries
      (ENV['FASTLANE_XCODEBUILD_SETTINGS_RETRIES'] || 3).to_i
    end

    # @internal to module
    # runs the specified command with the specified number of retries, killing each run if it times out
    # @raises Timeout::Error if all tries result in a timeout
    # @returns the output of the command
    # Note: - currently affected by https://github.com/fastlane/fastlane/issues/1504
    #       - retry feature added to solve https://github.com/fastlane/fastlane/issues/4059
    def self.run_command(command, timeout: 0, retries: 0, print: true)
      require 'timeout'

      UI.command(command) if print

      result = ''

      total_tries = retries + 1
      try = 1
      begin
        Timeout.timeout(timeout) do
          # Using Helper.backticks didn't work here. `Timeout` doesn't time out, and the command hangs forever
          result = `#{command}`.to_s
        end
      rescue Timeout::Error
        try_limit_reached = try >= total_tries

        message = "Command timed out after #{timeout} seconds on try #{try} of #{total_tries}"
        message += ", trying again..." unless try_limit_reached

        UI.important(message)

        raise if try_limit_reached

        try += 1
        retry
      end

      return result
    end
  end
end
